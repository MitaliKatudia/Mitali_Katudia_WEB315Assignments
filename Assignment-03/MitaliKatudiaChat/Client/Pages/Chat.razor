@page "/chat"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<div class="form-group">
    <label>
        Name:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" @onfocus="SendToOthers" @onblur="RemoveSendToOthers" />
    </label>
    <span class="hiddenMessage" hidden="@(userName == null)" >@userName is typing something...</span>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private string userInput;
    private string messageInput;
    private string userName;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });
        hubConnection.On<string>("isTypingSomething", (userName) =>
        {
            StateHasChanged();
        });


        await hubConnection.StartAsync();
    }

    async Task Send() {
        await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        {
        messageInput = "";
        RemoveSendToOthers();
        }
    }
    async Task SendToOthers() =>
        await hubConnection.SendAsync("SendMessageToOthers", userName);

    async Task RemoveSendToOthers() =>
        await hubConnection.SendAsync("SendMessageToOthers", "");

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}